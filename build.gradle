plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.jellybrains.quietspace'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.cloud:spring-cloud-starter-config'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'jakarta.validation:jakarta.validation-api:3.1.0'
        implementation 'me.paulschwarz:spring-dotenv:4.0.0'
        testImplementation platform('org.junit:junit-bom:5.9.1')
        testImplementation 'org.junit.jupiter:junit-jupiter'

        implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
        implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
        implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

        implementation 'org.springframework.retry:spring-retry:2.0.6'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-websocket:3.3.3'
        implementation 'org.springframework.kafka:spring-kafka'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.kafka:spring-kafka-test'
        testImplementation 'io.projectreactor:reactor-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
}


test {
    useJUnitPlatform()
}

bootJar {
    enabled = false
}

bootBuildImage {
    enabled = false
}

subprojects {

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }

    tasks.register('pushImage') {
        doLast {
            if (bootBuildImage.getEnabled()) {
                exec {
                    commandLine 'docker', 'tag', "${project.name}:0.0.1-SNAPSHOT", "${System.getenv('DOCKER_USERNAME')}/${project.name}"
                }
                exec {
                    commandLine 'docker', 'push', "${System.getenv('DOCKER_USERNAME')}/${project.name}"
                }
            }
        }
    }

    bootBuildImage {
        imageName = "${System.getenv('DOCKER_USERNAME')}/${project.name}"
    }
}